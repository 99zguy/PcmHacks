using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Flash411
{
    /// <summary>
    /// This class is responsible for generating the messages that the app sends to the PCM.
    /// </summary>
    /// <remarks>
    /// The messages generated by this class are byte-for-byte exactly what the PCM 
    /// receives, with the exception of the CRC byte at the end. CRC bytes must be 
    /// added by the currently-selected Device class if the actual device doesn't add 
    /// the CRC byte automatically.
    ///
    /// Some devices will require these messages to be translated according to the specific
    /// device's protocol - that too is the job of the currently-selected Device class.
    /// </remarks>
    class MessageFactory
    {
        /// <summary>
        /// Create a request to read the given block of PCM memory.
        /// </summary>
        public Message CreateReadRequest(byte block)
        { 
            byte[] bytes = new byte[] { 0x6C, DeviceId.Pcm, DeviceId.Tool, 0x3C, block };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a request to read the PCM's operating system ID.
        /// </summary>
        /// <returns></returns>
        public Message CreateOperatingSystemIdReadRequest()
        {
            return CreateReadRequest(BlockId.OperatingSystemID);
        }

        /// <summary>
        /// Create a request to read the PCM's Calibration ID.
        /// </summary>
        /// <returns></returns>
        public Message CreateCalibrationIdReadRequest()
        {
            return CreateReadRequest(BlockId.CalibrationID);
        }

        /// <summary>
        /// Create a request to read the PCM's Hardware ID.
        /// </summary>
        /// <returns></returns>
        public Message CreateHardwareIdReadRequest()
        {
            return CreateReadRequest(BlockId.HardwareID);
        }

        /// <summary>
        /// Create a request to read the first segment of the PCM's VIN.
        /// </summary>
        public Message CreateVinRequest1()
        {
            return CreateReadRequest(BlockId.Vin1);
        }

        /// <summary>
        /// Create a request to read the second segment of the PCM's VIN.
        /// </summary>
        public Message CreateVinRequest2()
        {
            return CreateReadRequest(BlockId.Vin2);
        }

        /// <summary>
        /// Create a request to read the thid segment of the PCM's VIN.
        /// </summary>
        public Message CreateVinRequest3()
        {
            return CreateReadRequest(BlockId.Vin3);
        }

        /// <summary>
        /// Create a request to read the first segment of the PCM's Serial Number.
        /// </summary>
        public Message CreateSerialRequest1()
        {
            return CreateReadRequest(BlockId.Serial1);
        }

        /// <summary>
        /// Create a request to read the second segment of the PCM's Serial Number.
        /// </summary>
        public Message CreateSerialRequest2()
        {
            return CreateReadRequest(BlockId.Serial2);
        }

        /// <summary>
        /// Create a request to read the thid segment of the PCM's Serial Number.
        /// </summary>
        public Message CreateSerialRequest3()
        {
            return CreateReadRequest(BlockId.Serial3);
        }

        /// <summary>
        /// Create a request to read the Broad Cast Code (BCC).
        /// </summary>
        public Message CreateBCCRequest()
        {
            return CreateReadRequest(BlockId.BCC);
        }

        /// <summary>
        /// Create a request to read the Broad Cast Code (MEC).
        /// </summary>
        public Message CreateMECRequest()
        {
            return CreateReadRequest(BlockId.MEC);
        }

        /// <summary>
        /// Create a request to retrieve a 'seed' value from the PCM
        /// </summary>
        public Message CreateSeedRequest()
        {
            byte[] bytes = new byte[] { 0x6C, DeviceId.Pcm, DeviceId.Tool, 0x27, 0x01 };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a request to send a 'key' value to the PCM
        /// </summary>
        public Message CreateUnlockRequest(UInt16 key)
        {
            byte keyHigh = (byte)((key & 0xFF00) >> 8);
            byte keyLow = (byte)(key & 0xFF);
            byte[] bytes = new byte[] { 0x6C, DeviceId.Pcm, DeviceId.Tool, 0x27, 0x02, keyHigh, keyLow };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a block message from the supplied arguments.
        /// </summary>
        public Message CreateBlockMessage(byte[] payload, int offset, int length, int address, bool execute)
        {
            byte mode=0x36; // Upload to PCM
            byte submode = 0x00; // Flags
            if (execute) {
                submode = (byte)(1 << 7); // execute bit
            }
            byte size1 = unchecked((byte)(length >> 8));
            byte size2 = unchecked((byte)(length & 0xFF));
            byte addr1 = unchecked((byte)(address >> 16));
            byte addr2 = unchecked((byte)(address >> 8));
            byte addr3 = unchecked((byte)(address & 0xFF));

            byte[] buffer = new byte[10 + length + 2];
            byte[] header = { 0x6D, DeviceId.Pcm, DeviceId.Tool, mode, submode, size1, size2, addr1, addr2, addr3 };

            Buffer.BlockCopy(buffer, 0, header, 0, header.Length);
            Buffer.BlockCopy(buffer, header.Length, payload, offset, length);

            return new Message(AddBlockChecksum(buffer));
        }

        /// <summary>
        /// Write a 16 bit sum to the end of a block, returns a Message, as a byte array
        /// </summary>
        /// <remarks>
        /// Overwrites the last 2 bytes at the end of the array with the sum
        /// </remarks>
        public byte[] AddBlockChecksum(byte[] block)
        {
            UInt16 sum = 0;

            for (int i = 4; i < block.Length-2; i++) // skip prio, dest, src, mode
            {
                sum += block[i];
            }

            block[block.Length - 2] = unchecked((byte)(sum >> 8));
            block[block.Length - 1] = unchecked((byte)(sum & 0xFF));

            return block;
        }

        /// <summary>
        /// Create a request for the PCM to test VPW speed switch to 4x is OK
        /// </summary>
        public Message CreateHighSpeedCheck()
        {
            return new Message(new byte[] { 0x6C, 0xFE, DeviceId.Tool, 0xA0 });
        }

        /// <summary>
        /// PCM Response if a switch to VPW 4x is OK
        /// </summary>
        public Message CreateHighSpeedOKResponse()
        {
            return new Message(new byte[] { 0x6C, DeviceId.Tool, DeviceId.Pcm, 0xE0 });
        }


        /// <summary>
        /// Create a request for the PCM to switch to VPW 4x
        /// </summary>
        public Message CreateBeginHighSpeed()
        {
            return new Message(new byte[] { 0x6C, DeviceId.Broadcast, DeviceId.Tool, 0xA1 });
        }

        /// <summary>
        /// Create a broadcast message announcing there is a test device connected to the vehicle
        /// </summary>
        public Message CreateTestDevicePresent()
        {
            byte[] bytes = new byte[] { 0x6C, DeviceId.Broadcast, DeviceId.Tool, 0x3F };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a broadcast message telling the PCM to clear DTCs
        /// </summary>
        public Message CreateClearDTCs()
        {
            byte[] bytes = new byte[] { 0x68, 0x6A, DeviceId.Tool, 0x04 };
            return new Message(bytes);
        }

        /// <summary>
        /// A successfull response seen after the Clear DTCs message
        /// </summary>
        public Message CreateClearDTCsOK()
        {
            byte[] bytes = new byte[] { 0x48, 0x6B, DeviceId.Pcm, 0x44 };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a broadcast message telling all devices to disable normal message transmission (disable chatter)
        /// </summary>
        public Message CreateDisableNormalMessageTransmition()
        {
            byte[] bytes = new byte[] { 0x6C, DeviceId.Broadcast, DeviceId.Tool, 0x28, 0x00 };
            return new Message(bytes);
        }

        /// <summary>
        /// Create a broadcast message telling all devices to disable normal message transmission (disable chatter)
        /// </summary>
        public Message CreateDisableNormalMessageTransmitionOK()
        {
            byte[] bytes = new byte[] { 0x6C, DeviceId.Tool, DeviceId.Pcm, 0x68, 0x00 };
            return new Message(bytes);
        }
    }
}
